________________________________________________________________________________________
http://localhost:8080/ 😎😎😎😎😎😎😎😎😎😎😎😎😎😎😎😎😎😎😎😎😎😎😎😎
// BACKEND BACKEND  BACKEND BACKEND BACKEND BACKEND BACKEND BACKEND BACKEND BACKEND BACKEND BACKEND BACKEND BACKEND BACKEND BACKEND BACKEND BACKEND BACKEND BACKEND BACKEND BACKEND  BACKEND BACKEND BACKEND BACKEND BACKEND BACKEND BACKEND BACKEND BACKEND BACKEND BACKEND BACKEND BACKEND BACKEND BACKEND BACKEND BACKEND BACKEND 
http://localhost:8080/
________________________________________________________________________________________
________________________________________________________________________________________
// added 5 folders besides basic(config folder containing db-connect file) for mvc of web-app

// keep the separation of concerns, like helpers(or utils), routes, controllers, models, middlewares 👀  (5) essentials..

________________________________________________________________________________________
// MODEL ________________________________________________________________________________________________
________________________________________________________________________________________
// we create a model, 1st one is userModel where we define userSchema (for new website visitors tracing), and saving to database

________________________________________________________________________________________
// ROUTE _______________________________________________________________________________________________
________________________________________________________________________________________
// we create routes, 1st is auth Route (for new users ), for proper app routing the new users data to database(creating route through ExpressJS)

// as we following mvc, 😎

________________________________________________________________________________________
// CONTROLLER ________________________________________________________________________________________
________________________________________________________________________________________
// we create controllers for routing , 1st is (authController), authController will contain register, login ...

________________________________________________________________________________________
// HELPER __________________________________________________________________________________________
________________________________________________________________________________________
// we will now create a Helpers, (1st is authHelper) for functions like registration, passcode encryption/hashing and comparison

// registration api working, mongoDB and all📌

// but now we secure app using JSON web token🙏

// jwt ( JSON web token) will provide token (custom/self written jwt-secret) during login, 

// so during-login, password decrypted(un-hased #) (loginController decrypt password) and token provided(with expiry if there)

// login api working, mongoDB and all📌

// for jwt sake and usage,

________________________________________________________________________________________
// MIDDLEWARE ___________________________________________________________________________________________________
________________________________________________________________________________________
// we create middleware(s) to protect every other route, after register and login, like requireSignIn(for decrypt TOKEN and checking in every route request except register/login), 

// create second middleware isAdmin(for checking ADMIN privileges)

________________________________________________________________________________________
http://localhost:3000/ 😎😎😎😎😎😎😎😎😎😎😎😎😎😎😎😎😎😎😎😎😎😎😎😎
// FRONTEND FRONTEND FRONTEND FRONTEND  FRONTEND FRONTEND FRONTEND FRONTEND  FRONTEND FRONTEND FRONTEND FRONTEND  FRONTEND FRONTEND FRONTEND FRONTEND  FRONTEND FRONTEND FRONTEND FRONTEND  FRONTEND FRONTEND FRONTEND FRONTEND  FRONTEND FRONTEND FRONTEND FRONTEND  FRONTEND FRONTEND  FRONTEND FRONTEND FRONTEND FRONTEND  FRONTEND FRONTEND
http://localhost:3000/
________________________________________________________________________________________
________________________________________________________________________________________

// (MUST) add bootstrap 5 to frontend/public/index.html 😎

// (MUST) remove all css (eg. app.css, index.css) (i.e Globally index. and very-first Component-App.)

// (MUST) add css (index.css - i.e. global) as the (backend has server.js && frontend has index.js)

// note: browser sees index.html (as browser requests/receives index.html) WEBPACK-👀 injects automatically <script> tag for index.js to index.html (DURING BUILD PROCESS) 

// create components and pages folder -------------------------
// pages would have navigations, routing, ....................

// 1st component- LAYOUT.JS (app.js is 1st but given to us, so assume it 0th component(app.js)📌) (consume header && footer in Layout component for later use)
________________________________________________________________________________________
// FRONTEND - props (----------------------------know-how)
________________________________________________________________________________________
________________________________________________________________________________________

// props spelling not must to be correct, it's just an object😅 (it can be porps, popcorn)

// create a layout component with header and footer, (LAYOUT COMPONENT FOR FLEXIBILITY eg. header, footer and later in future->sidebar)

// WORKING 1st define component with prop e.g... const MyComponent = (props) => { // ...}; (PROPS PARAMETER IS AN OBJECT)

// USAGE 2nd use component with props e.g... <MyComponent msg="Hello" name="Rohit"/> // // Inside MyComponent, the props object will be 
    {
    msg:"Hello",
    name:"Rohit"
    }

// children (i.e. as in props.children) is a SPECIAL PROP, Layout component is parent, and whatever in between that would be children automatically

// {obj} DESTRUCTURING allows to unpack properties/keys (obj=key-value pair) from {ojb} into vars

// so, children is special prop, and whatever regular props have to define can be destructured along this special prop, e.g
// const Layout = ({ children, showFooter }) 
// showFooter is regular prop 

//   <Layout showFooter={true}>
//        <h1>Page 1 Content</h1>
//   </Layout>
________________________________________________________________________________________

// mern app = spa(single page app) so routing(i.e react-router-dom package) necessary📌

// use BrowserRouter😃 i.e from rectroutDOM, (main file - index.js)

// create different pages, (i.e. home, about, contact, ... wrapped in our LAYOUT)

// remove 0th component(app.js) <h1>Ecomm app</h1> 
// i.e.   <Layout>
// <h1>Ecommerce App</h1>
//  </Layout>

// import Routes, Route for app.js along with nav links to pages
________________________________________________________________________________________
// FRONTEND - router (----------------------------know-how)
________________________________________________________________________________________
________________________________________________________________________________________
// use Routes as CONTAINER, and Route for specificity(subjects-pages)

// use paths along their elements...
// eg. path="/" element={<HomePage />}, path="/about" element={<About/>} etc.

// use  <Route path="*" element={<Pagenotfound />} /> (AFTER ALL ROUTE) 😎😎😎 for everything

// BECAUSE ✅ 200 - success, 🔁 300 - redirects, ❌ 400 - client errors, 💥 500 -server errors
// ℹ️ 100 - informational (i.e. 100 continue- client can continue with request, 101 Switching Protocols- Protocol change (eg. HTTP to WebSocket))etc.
________________________________________________________________________________________

// DESIGN--  RE-Design (header, footer)

// visit getbootstrap.com (for CSS - header-navbar)

// Now, in place of anchor(<a>), Usage of NavLink (from REACT ROUTER DOM) take place...

// After pasting any boilerplate code or little template snippets, use COVERT HTML TO JSX, (like for eg. bootstrap navbar) --- 😎😎 Because CLASS changes to CLASS_NAME

// .gitignore in parent(backend folder) ignores /public for backend but not of child-FRONTEND(client/public) using client/public/* && !client/public/robots.txt, !client/public/img

// Style navbar with react icons and link, navlink-to and custom css (😌link for internal linking, navlink for beautiful styled links in menus,navs,headers)

// Ensure fonts properly, BOOTSTRAP by default provides- roboto font, FALLBACK(sans-serif) for each fonts use, (import others as required)

// besides REACT -icons, :emojisense: VS-CODE EXTENSION ___ctrl+i eg.shopping cart icon for logo 🛒

// 💯 FOOTER - with links 

// after Header, Footer done, on going to pages --> page title not changing (We should make it SEO💡 friendly)...

// Currently we not have routes for /category /register /login /cart (where we will show as all other not existing routes, Page not Found )

// GIT COMMANDS, from commits to merging and all..................... GIT🎁 (Github DESKTOP app = Focus on what matters instead of fighting with Git) example: use github app for ammending(commit message) and then git push --force (for altering commit in that main repo from where it is cloned)...

// REACT - by default not supports SEO, (third party packages) and other fundamentals for GOOGLE to consider your software to be ranked.... (eg. meta tag)

// so, as Meta tags gets static/hard-coded not dynamic, so React-HELMET (keywords, description)...

// Layout.defaultProps 🍕🍕🍕 (OBJECT😅) for default ones if no props gets passed,  (eg. in layout wrapping each page, title-description && -keywords for whole ecommerce site), or otherwise pass props from each page (100% seo), other packages later...

// issues with React-helmet package, some of good latest packages are react-helmet-async🍜

// use * instead /* for non exising pages- routes....

// Now Register and other pages like login

// Register page - FRONTEND

