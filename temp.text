📌📌
________________________________________________________________________________________
http://localhost:8080/ 😎😎😎😎😎😎😎😎😎😎😎😎😎😎😎😎😎😎😎😎😎😎😎😎
// BACKEND BACKEND  BACKEND BACKEND BACKEND BACKEND BACKEND BACKEND BACKEND BACKEND BACKEND BACKEND BACKEND BACKEND BACKEND BACKEND BACKEND BACKEND BACKEND BACKEND BACKEND BACKEND  BACKEND BACKEND BACKEND BACKEND BACKEND BACKEND BACKEND BACKEND BACKEND BACKEND BACKEND BACKEND BACKEND BACKEND BACKEND BACKEND BACKEND BACKEND 
http://localhost:8080/
________________________________________________________________________________________
📌📌
________________________________________________________________________________________
// added 5 folders besides basic(config folder containing db-connect file) for mvc of web-app

// keep the separation of concerns, like helpers(or utils), routes, controllers, models, middlewares 👀  (5) essentials..

________________________________________________________________________________________
📌📌
// MODEL ________________________________________________________________________________________________
________________________________________________________________________________________
// we create a model, 1st one is userModel where we define userSchema (for new website visitors tracing), and saving to database

________________________________________________________________________________________
📌📌
// ROUTE _______________________________________________________________________________________________
________________________________________________________________________________________
// we create routes, 1st is auth Route (for new users ), for proper app routing the new users data to database(creating route through ExpressJS)

// as we following mvc, 😎

________________________________________________________________________________________
📌📌
// CONTROLLER ________________________________________________________________________________________
________________________________________________________________________________________
// we create controllers for routing , 1st is (authController), authController will contain register, login ...

________________________________________________________________________________________
📌📌
// HELPER __________________________________________________________________________________________
________________________________________________________________________________________
// we will now create a Helpers, (1st is authHelper) for functions like registration, passcode encryption/hashing and comparison

// registration api working, mongoDB and all📌

// but now we secure app using JSON web token🙏

// jwt ( JSON web token) will provide token (custom/self written jwt-secret) during login, 

// so during-login, password decrypted(un-hased #) (loginController decrypt password) and token provided(with expiry if there)

// login api working, mongoDB and all📌

// for jwt sake and usage,

________________________________________________________________________________________
📌📌
// MIDDLEWARE ___________________________________________________________________________________________________
________________________________________________________________________________________
// we create middleware(s) to protect every other route, after register and login, like requireSignIn(for decrypt TOKEN and checking in every route request except register/login), 

// create second middleware isAdmin(for checking ADMIN privileges)

________________________________________________________________________________________
📌📌
http://localhost:3000/ 😎😎😎😎😎😎😎😎😎😎😎😎😎😎😎😎😎😎😎😎😎😎😎😎
// FRONTEND FRONTEND FRONTEND FRONTEND  FRONTEND FRONTEND FRONTEND FRONTEND  FRONTEND FRONTEND FRONTEND FRONTEND  FRONTEND FRONTEND FRONTEND FRONTEND  FRONTEND FRONTEND FRONTEND FRONTEND  FRONTEND FRONTEND FRONTEND FRONTEND  FRONTEND FRONTEND FRONTEND FRONTEND  FRONTEND FRONTEND  FRONTEND FRONTEND FRONTEND FRONTEND  FRONTEND FRONTEND
http://localhost:3000/
________________________________________________________________________________________
________________________________________________________________________________________

// (MUST) add bootstrap 5 to frontend/public/index.html 😎

// (MUST) remove all css (eg. app.css, index.css) (i.e Globally index. and very-first Component-App.)

// (MUST) add css (index.css - i.e. global) as the (backend has server.js && frontend has index.js)

// note: browser sees index.html (as browser requests/receives index.html) WEBPACK-👀 injects automatically <script> tag for index.js to index.html (DURING BUILD PROCESS) 

// create components and pages folder -------------------------
// pages would have navigations, routing, ....................

// 1st component- LAYOUT.JS (app.js is 1st but given to us, so assume it 0th component(app.js)📌) (consume header && footer in Layout component for later use)
________________________________________________________________________________________
📌📌
// FRONTEND - props (----------------------------know-how)
________________________________________________________________________________________
________________________________________________________________________________________

// props spelling not must to be correct, it's just an object😅 (it can be porps, popcorn)

// create a layout component with header and footer, (LAYOUT COMPONENT FOR FLEXIBILITY eg. header, footer and later in future->sidebar)

// WORKING 1st define component with prop e.g... const MyComponent = (props) => { // ...}; (PROPS PARAMETER IS AN OBJECT)

// USAGE 2nd use component with props e.g... <MyComponent msg="Hello" name="Rohit"/> // // Inside MyComponent, the props object will be 
    {
    msg:"Hello",
    name:"Rohit"
    }

// children (i.e. as in props.children) is a SPECIAL PROP, Layout component is parent, and whatever in between that would be children automatically

// {obj} DESTRUCTURING allows to unpack properties/keys (obj=key-value pair) from {ojb} into vars

// so, children is special prop, and whatever regular props have to define can be destructured along this special prop, e.g
// const Layout = ({ children, showFooter }) 
// showFooter is regular prop 

//   <Layout showFooter={true}>
//        <h1>Page 1 Content</h1>
//   </Layout>
________________________________________________________________________________________

// mern app = spa(single page app) so routing(i.e react-router-dom package) necessary📌

// use BrowserRouter😃 i.e from rectroutDOM, (main file - index.js)

// create different pages, (i.e. home, about, contact, ... wrapped in our LAYOUT)

// remove 0th component(app.js) <h1>Ecomm app</h1> 
// i.e.   <Layout>
// <h1>Ecommerce App</h1>
//  </Layout>

// import Routes, Route for app.js along with nav links to pages
________________________________________________________________________________________
📌📌
// FRONTEND - router (----------------------------know-how)
________________________________________________________________________________________
________________________________________________________________________________________
// use Routes as CONTAINER, and Route for specificity(subjects-pages)

// use paths along their elements...
// eg. path="/" element={<HomePage />}, path="/about" element={<About/>} etc.

// use  <Route path="*" element={<Pagenotfound />} /> (AFTER ALL ROUTE) 😎😎😎 for everything

// BECAUSE ✅ 200 - success, 🔁 300 - redirects, ❌ 400 - client errors, 💥 500 -server errors
// ℹ️ 100 - informational (i.e. 100 continue- client can continue with request, 101 Switching Protocols- Protocol change (eg. HTTP to WebSocket))etc.
________________________________________________________________________________________

// DESIGN--  RE-Design (header, footer)

// visit getbootstrap.com (for CSS - header-navbar)

// Now, in place of anchor(<a>), Usage of NavLink (from REACT ROUTER DOM) take place...

// After pasting any boilerplate code or little template snippets, use COVERT HTML TO JSX, (like for eg. bootstrap navbar) --- 😎😎 Because CLASS changes to CLASS_NAME

// .gitignore in parent(backend folder) ignores /public for backend but not of child-FRONTEND(client/public) using client/public/* && !client/public/robots.txt, !client/public/img

// Style navbar with react icons and link, navlink-to and custom css (😌link for internal linking, navlink for beautiful styled links in menus,navs,headers)

// Ensure fonts properly, BOOTSTRAP by default provides- roboto font, FALLBACK(sans-serif) for each fonts use, (import others as required)

// besides REACT -icons, :emojisense: VS-CODE EXTENSION ___ctrl+i eg.shopping cart icon for logo 🛒

// 💯 FOOTER - with links 

// after Header, Footer done, on going to pages --> page title not changing (We should make it SEO💡 friendly)...

// Currently we not have routes for /category /register /login /cart (where we will show as all other not existing routes, Page not Found )

// GIT COMMANDS, from commits to merging and all..................... GIT🎁 (Github DESKTOP app = Focus on what matters instead of fighting with Git) example: use github app for ammending(commit message) and then git push --force (for altering commit in that main repo from where it is cloned)...

// REACT - by default not supports SEO, (third party packages) and other fundamentals for GOOGLE to consider your software to be ranked.... (eg. meta tag)

// so, as Meta tags gets static/hard-coded not dynamic, so React-HELMET (keywords, description)...

// Layout.defaultProps 🍕🍕🍕 (OBJECT😅) for default ones if no props gets passed,  (eg. in layout wrapping each page, title-description && -keywords for whole ecommerce site), or otherwise pass props from each page (100% seo), other packages later...

// issues with React-helmet package, some of good latest packages are react-helmet-async🍜

// use * instead /* for non exising pages- routes....

// Now Register and other pages like login (rafce - react arrow function with export (VS CODE SNIPPET))

// Register page - FRONTEND

// use bootstrap for register .. & login page template

// ////////////////////////////////////////////////////// Register page /////////////////////////////////////////////
📌📌
📌📌
// importing packages in client(frontend) and main directory(backend) differs a little as backend directory - package.json mentioned (type:"module") but
// While We can use the .js extension for local modules in ES6 imports,but many libraries, including JWT, may not require it due to historical reasons and compatibility with older Node.js versions

// Register form termplate from bootstrap-5 docs && then convert HTML to JSX

axios (for http client) & toastify (for notifications) -

cors (for connecting two servers =  ports 8080 && 3000 causing cross - origin conflict) // so cancel errors related to origin

concurrently ( for npm start - both client and server in single command)

------------axios -  `${process.env.REACT_APP_API}/api/v1/auth/register`, ((SEND DATA OF REGISTER FORM TO BACKEND))
--as defined ✨in auth route - post register for method, we will send form data to the register controller (i.e to the auth controller) having following::

-------------------------------------
 res.status(201).send({
      success: true,
      message: "User registered successfully",
 })
-------------------------------------

///////////////////////////////////////////////////////  Register page ends //////////////////////////////////////////////////
📌📌
📌📌
________________________________________________________________________________________
From now on, just run (npm run dev) for development of both frontend and backend (run in just 1 cli)

npm run dev 

> ecommerce-app-7@1.0.0 dev
> concurrently "npm run server" "npm run client"
________________________________________________________________________________________


________________________________________________________________________________________
💀💀💀
For following error, remove <React.StrictMode> <React.StrictMode> from index.js 

Using UNSAFE_componentWillMount in strict mode is not recommended and may indicate bugs in your code. See https://react.dev/link/unsafe-component-lifecycles for details.

* Move code with side effects to componentDidMount, and set initial state in the constructor.

Please update the following components: SideEffect(NullComponent)
________________________________________________________________________________________


________________________________________________________________________________________
💀💀💀 🦊🦊🦊🦊
For following error,
firefox console showing (UNDEFINED) within post request url !!!
http://localhost:3000/undefined/api/v1/auth/regis

FOR THAT, W-E  A-D-D-E-D  P-R-O-X-Y not normal .env variable
> package.json, add "proxy":"http://localhost:8080
---------------------------------------------------
  "name": "client",
  "proxy": "http://localhost:8080",
________________________________________________________________________________________


________________________________________________________________________________________
💀💀
react -toastify not showing up 
on success user registatin navigate to login
so - ANOTHER PACKAGE RE-PLACEMENT (react -hot -toast)
________________________________________________________________________________________

________________________________________________________________________________________
📌📌
created a styles folder in src (of frontend i.e client)
AS INLINE-CSS is OLD, (CAUSES WEBSITE SPEED ISSUES)
we created authStyles css file for forms-authPages
________________________________________________________________________________________

________________________________________________________________________________________
📌📌
after login form -> html && css
controller already setup (setup already done)
route already setup (setup already done)
________________________________________________________________________________________

________________________________________________________________________________________
📢📢📢📢
We will use CONTEXT API for this project, not redux-toolkit

Nothing to install, react already provides CONTEXT (function(i.e hooks) based, )

let's create CONTEXT
________________________________________________________________________________________
❓❓❔❔
unpredicted - Login page getting css automatically without explicitly defining import "../../styles/AuthStyles.css";

(🌟 CONTEXT-APi + LOCAL-Storage ---> SURVIVES REFRESH___________)
Ok, now STORE LOGIN credentials to -> CONTEXT API -> LOCAL STORAGE, before homepage redirect

--- after some chat gpting;💀💀💀
i got to know = Because CSS is global in React unless scoped🚑🚑🚑

-- so thing to always remember (css is global in react unless -- css modules for scoped styling or just have css imports in app.js - laziness at extreme)
// for now, moving that css import to app.js (to showcase, it is done as per intention- sharing to both form pages)

// key note: to keep styles isolated to a single component,, IT OUGHT TO USE - css modules🚑🚑
________________________________________________________________________________________

________________________________________________________________________________________
💡💡💡
So, to persist Context API state across page refreshes,  (login - credentials)
we explicitly stored and retrieved data using client-side storage (LOCAL STORAGE)

after 1st login redirect- >>>>SET_AUTH of Login-page works until refresh<<<<<<, then on refresh(homepage refresh, so did our CONTEXT API CODE calling LOCAL-STORAGE for Login-credentials)
________________________________________________________________________________________

________________________________________________________________________________________
⚡💀⚡⚡❔❓❓
 error:
 Maximum update depth exceeded. This can happen when a component calls setState inside useEffect, but useEffect either doesn't have a dependency array, or one of the dependencies changes on every render.

 in context api folder (nested in src folder of frontend), auth.js for (context api- global storage for login credentials), I got provided with knowledge to use (auth, setAuth)

 but error gone after removing [auth] from dependency array, as it is triggering infinite loop.

 what i know: blank dependency array run once.
 what i got to know(this error): We are initializing state from localStorage, so there's no need to watch auth for changes.

 // then i discovered (which exists, but i not found yet, or my small brain not catched)

 for cancelling linter (e.g eslint) issues (we done that)
✅ // eslint-disable-next-line

which only & only applies to the very next line
// that prevented eslint warning ---
----------------------------------------- for example below
useEffect(() => {
  console.log(auth);                // <-- used here
}, []);                             // <-- not included here
---------------------------------------------
As, eslint says:
ESLint says:
⚠️ React Hook useEffect has a missing dependency: 'auth'. Either include it or remove the dependency array.

//now question arises
// ❓ But Why Does This Matter?
// ✔☑✅ Including dependencies ensures the effect always runs with the latest values.

------------ IMAGINE
useEffect(() => {
  if (auth.token) doSomething();
}, []);
---------------
🚑🚑🚑
If auth.token is updated after mount — this effect will never re-run, and you'll miss that token change. That’s what the ESLint rule is trying to prevent. (T-O-K-E-N🙏)
 ________________________________________________________________________________________

 ________________________________________________________________________________________
🏆🏆🏆
🥇🥇🥇
LIVE PROJECT WORKING ON THIS STATE, THE FRONTEND IS IN THE VERCEL, THE BACKEND IS IN THE RENDER, OTHER FREE BACKEND DEPLOYMENT OPTIONS Currently
NOT FREE / E.G CYCLIC, RAILWAY, (RAILWAY DOES PROVIDES SOME FREE TIER BUT FOR SOMETIME, AFTER THAT IT ALSO STOPS WORKING)

// A FACT:
🚫 Don't use import.meta.env unless you're using Vite. (as Render - free backend DEPLOYMENT also runs using process.env for dynamic url for cra apps)
________________________________________________________________________________________
________________________________________________________________________________________

🔥🔥🔥making use of a variable (for making both frontend and backend work)
  const API =
    process.env.NODE_ENV === "production" ? process.env.REACT_APP_API : "";

    using in register/login for (working on both local machine and at production without mis-configuring anything, (frontend using proxy(in package.json stating backend url - http://localhost:8080) so, not need for url))

    🧭🧭🧭(the magician here) = process.env.NODE_ENV
This is automatically injected by React Scripts (from react-scripts) to tell the app which mode it's running in:
--------------------------------------------------------
"development" — when you run npm start

"production" — when you run npm run build
________________________________________________________________________________________
________________________________________________________________________________________
🐐🐐🐐
not console logs in production (to prevent cluttering)
or
lowering user experience
________________________________________________________________________________________

________________________________________________________________________________________
create a user dashboard page;;; 
i.e user page -> dashboard 

// then a new Component(2nd component = Routes) = components -> Routes(Private.js) (i.e a private component after routing passing all checks of protected route), (1st component = Layout is generic one for scaffolding every page as we know-desinging purpose)

// for nested routing
-- we use <OUTLET> (react-router-dom)
________________________________________________________________________________________

________________________________________________________________________________________
then,
 include axios header(which we trying to do in - GLOBAL (i.e CONTEXT API))
 // we set axios defaults, not app-BASE-URL for now, but axios requests headers
 // axios.defaults.headers.common['Authorization'] = auth?.token;
 ---- 2nd component(Routing, 1st one is LAYOUT) ->private.js -- for token-checks, auth-checks
 ----- that also recalls of that useEffect dependencies check -i.e OUGHT TO INCLUDE token-checks variable e.g auth?.token to dependency array [], // the EDGE-cases es-linter tries to prevent

 i.e do the following globally (not repetitive - kind of like programmatic seo - bots fills data on every creation without 
 seo persons intervention)
-------------------------------------
  headers: {
          Authorization: auth?.token,
        },
---------------------------------------
   // the auth?.token works behind the scenes as conditionally executing further code - after auth only if yes
  // (i.e if auth then only auth.token - By condition(auth?.token))

Now, we can remove the 2nd object😅

Before:
  const res = await axios.get(`${API}/api/v1/auth/user-auth`, { headers: { Authorization: auth?.token } });

After:
  const res = await axios.get(`${API}/api/v1/auth/user-auth`, );
  const res = await axios.get(`${API}/api/v1/auth/user-auth`);
________________________________________________________________________________________

________________________________________________________________________________________
get spinner, (get.Bootstrap😃), 
for now, we are using --- ----- rotating ring spinner

// just out of curiosity:
/// 2 spinners in (get bootstrap)
------------------------------
.spinner-border — the rotating ring

.spinner-grow — the pulsating grow spinner
-------------------------------
we will go for Placement (for that .spinner-border) 
for: Use flexbox utilities, float utilities, or text alignment utilities to place spinners exactly where you need them in any situation.
________________________________________________________________________________________

________________________________________________________________________________________
📌📌
3rd component - spinner 
copy bootstrap (.spinner-border -> Placement) 
then convert html->JSX
________________________________________________________________________________________

________________________________________________________________________________________
🏓🏓
Private Route in action (2nd component magic)

(within App.js)
Before:
 <Route path="/dashboard" element={<Dashboard />} />

 After:
   <Route path="/dashboard" element={<PrivateRoute/>}>
              <Route path="" element={<Dashboard />} />
   </Route>
________________________________________________________________________________________

________________________________________________________________________________________
now,
in 3rd component(Spinner), add logic (to not just show infinite looping animation - circle spinning)

useNavigate
useState
useEffect - No useEffect(() => {}) --- it will run on every render (one of worst cases..), array(dependency array[]) even if it is blank, tells to not re-run it on updates
🎉🎉
but for now, we are using useEffect (without condition-checks i.e auth?.token or execute further only if it is presence) and passing 2 values to dependency array [count, navigate] 
---- Long live Spinner.js (a very good component!!!)
________________________________________________________________________________________

________________________________________________________________________________________
🛺🛺
Accidentally, clicked INS key (secondary keyboard i am using for programming)
---------------------------------
VS Code, like many text editors, supports two modes:

1. Insert Mode (🟢 default): text is inserted at the cursor.
2. Overwrite Mode (🔴 problem): new text replaces existing text at the cursor.
----------------------------------
Pressed INS again, and the problem is gone...
________________________________________________________________________________________

________________________________________________________________________________________
in 3rd component(spinner.js)
which contains logic as of now, for redirecting to login (if trying to access protected /dashboard), & dashboard(for loged in users)

reduced 5 seconds -> 3 seconds (the time website assumes good to reduce users bouce rate, time after which users exits site)
________________________________________________________________________________________

________________________________________________________________________________________
📌📌
now User -experience (implement user location history, where does user navigating or trying -- kind of navigational keywords in google(eg. gov schemes, 
--company --service, pizza domminos))
-- why benefit?
assume, user has saved some product in cart,, or maybe he/she has a link(e.g checkout)
so if he/she login -> and our app throw him/her to homePage then user get confused(is it a good navigation, or my device problem)

spinner.js = access route from url(even if it is un-authorized, we re-direct it to /login, then on login-success, re-direct to /route they want to access )
// Destination without showcasing home-page un-necessarily 
✨✨useLocation hook (from 'react-router-dom')
________________________________________________________________________________________

________________________________________________________________________________________
⚡⚡⚡useLocation ...
the hook, not changes the spinner.js useEffect's dependency array vars from [count, navigate] to [count, navigate, location]

and also, LOGIN.js ---- no more just 
navigate('/') on formSubmit function, it get conditional - checks (some dynamics)
________________________________________________________________________________________

________________________________________________________________________________________

// let's create FORGOT-PASSWORD FUNCTIONALITY🎨🎨
add some secret key in model(i.e userModel) - like question; (question naming is confusing, so finally- answer)

create new END-POINT
in authRoute.js -> forgotPassword

But as per naming conventions and confustion prevention = question->answer... (change that key naming in the user model)
added -> authController ->forgotPassword()

now, give page(Register.js) the forgotPassword functionality (new field during register = answer);
// question chosen for filling up answer value = What is your favourite sports
now, give page(login.js) -> forgot password button below login button

now, create new auth page(just like login/register) -> forgotPassword.js
and then route to that auth page(forgotPassword) inside APP.JS

then, add that answer-> authController -> registerController(the 1st controller user form filling logic)
________________________________________________________________________________________

________________________________________________________________________________________
// some forgot-password form error
so removed client= frontend(package.json statement)
 "proxy": "http://localhost:8080",

 instead of that, we manually added; http://localhost:8080 to each forms- register, login, forgot-password
✅ CORS is a backend-only configuration.
so, we added to main backend file -> both origins(local:3000 and prod:vercel.com..)

error caught: mistakenly  destructuring req.body as an array using [] but req.body is a JSON object, (so values becomes undefined)😬
&& also another mistake, 1 more cors config below the 0th cors config causing backend crash(i.e app.options("*", cors());),

key note: Postman(for e.g using body → raw → JSON) doesn't care about CORS — but browser does(chrome, firefox running R-E-A-C-T)..
key note: ✅ Ensure backend allows CORS from frontend
key note: keep only 1 cors in backend for preventing unknown issues...(2 cors = backend crashes, tested)
 ________________________________________________________________________________________

 ________________________________________________________________________________________
 🔎🔎
postman running perfect
https://ecommerce-app-7-q9em.onrender.com/api/v1/auth/forgot-password
http://localhost:8080/api/v1/auth/forgot-password

but in front-ends (local and prod), getting post 404 not found errors...

Key note: having anything like (res.status(anything).send() e.g anything = 404 ) causes confusion so, even if status code
// are used without putting brain strain, even keep response.data.message something logical so, one can get illusion
// 404 not found( but still open up error-> response-> data)✨✨

// the following message saved hours, wrong http status code by coders
  // validation
    if (!user) {
      return res.status(404).send({
        success: false,
        message: "Wrong Email or Answer",
      });
    }
________________________________________________________________________________________

________________________________________________________________________________________
✨ 
role base authentication
 💀💀
for roles, have a dropdown (so get bootstrap)
ul inside li (i.e <li><ul>...</ul></li>)
// all basic FUNCTIONALITY🎨🎨 DONE, so we will now keep 2 dashboard - different for each role

// Now, we will work on dashboard
// 1st user dashboard (private.js)
// 2nd admin dashboard (also will connect it as same as protected route(private.js) or🎉 will copy Private.js->AdminRoute.js)- part of 2nd Component(for routing users and admins)

// Change role manually (i.e) -> we registered a user named as ADMIN
// and every user by default role(0)

// so going to mongoDB compass, change 0 to 1;

// now, creat-new one like, since pages -> user(i.e Dashboard.js),
hence pages -> admin(i.e AdminDashboard.js);

// create route for this(eg. route.get or post(__'/slug or id', handler__) ),, ->authRoute.js(having login, register, normalUser auth...)

// USER = normal user, ADMIN = power user;🐏🐏🎭🎭

so just like(normal user auth) route: router.get("/user-auth", requireSignIn, (req
create(power user auth)route: router.get("/user-auth", requireSignIn, (req

i.e.
/////// copy- user
 <Route path="/dashboard" element={<PrivateRoute />}>
          <Route path="user" element={<Dashboard />} />
        </Route>

/////// paste- admin
 <Route path="/dashboard" element={<AdminRoute />}>
          <Route path="admin" element={<AdminDashboard />} />
        </Route>

--------------------------- &&
[{(Header.js)}] + also pass role during (login.js) form submission 

// based on App.js before & after(paths i.e user and admin) as per role, for routing seamlessly
// before: 
<li>
<NavLink className="dropdown-item" to="/dashboard">
                          Dashboard
</NavLink>

// after: 
<li>
<NavLink className="dropdown-item" to={`/dashboard/${auth?.user?.role === 1? 'admin':'user'}`}>
                          Dashboard
</NavLink>
---------------------
// NOW The role based authentication completed----------- Header re-directing on click(Dashboard) based on auth.user.role

// in local live changes,,
for user(normal user) -> dashboard triggers = http://localhost:3000/dashboard/user
and for admin(power user) -> dashbord triggers = http://localhost:3000/dashboard/admin
________________________________________________________________________________________

________________________________________________________________________________________
🎉🎉🎉🎉
Now fix spinner, if user edits intentionally the localhost:3000/dashboard/ (from user-> admin), for which role is not permit

// spinner directs to login page, so send path(i.e user/admin) as prop to it, 
// spinner will now expect (path as prop, also initiate on the spot with value(login))
[i.e destructure path and having initial value of key being passed as prop - we done so, 
because if we not pass any value then it will pass us to login form page] 
and finally add -path to dependency array, 
last but not the least pass- path="" (blank path) to private route(i.e component for user) 
-the users which are editing url manually, 
to make spinner work conditionally, (fixes--)

Fix done: if user(normal user) trying to do localhost:3000/dashboard/admin instead localhost:3000/dashboard/user (manually), so even after login, the spinner takes them to login page.
________________________________________________________________________________________

________________________________________________________________________________________
😐😐 now user dashboard ui - 2 cols
left side - side bar menu
right side - Content
create new component(functional component named AdminMenu.js) and keep it inside Layout directory of components but keeping separate directory is preferred(4th Component)- 

so, we naming it (4th Component - Menu component -> sub-division(Admin_MENU)= AdminMenu.js)
________________________________________________________________________________________

________________________________________________________________________________________
📌📌
AdminMenu.js
(by helping of list- we design menus) = so, get bootstrap...(#list group)

Definition of list or list group (bootstrap) = List groups are a flexible and powerful component for displaying a series of content...
Modify and extend them to support just about any content within.

(now, convert html to jsx), also keep entering {CTRL + D}: vs code shortcut, to multiple select all anchor tags automatically,(for NavLink replace)

(for href, the same- keep entering {CTRL + D} for multiple selection, and renaming all href at once)
(and {CTRL + X} to remove the current line in which cursor is in the coding area...)

Now give routing using the NavLink (to="") in the various list group items - for api's inside dashboard/admin like /users, /create-product, /create-category....
________________________________________________________________________________________

________________________________________________________________________________________
Now, AdminDashboard.js 🐐🐐
use GRID;


{use CTRL + C} to copy current line (cursor is placed to write code)
issue resolved: css issues due to class(keyword) instead of className
issue not getting: auth?.user?.name from context api,,🤔🤔 
issue resolution:
before: const {auth} = useAuth();
after: const [auth] = useAuth(); 

if we want - const {auth} to work, then use object destructuring, not array destructuring(i.e <AuthContext.Provider value={{ auth, setAuth }}>)
________________________________________________________________________________________

________________________________________________________________________________________
create admin dashboard pages, and routing in app.js

it will become:
 <Route path="/dashboard" element={<AdminRoute />}>
          <Route path="admin" element={<AdminDashboard />} />
          <Route path="admin/create-category" element={<CreateCategory />} />
          <Route path="admin/create-product" element={<CreateProduct />} />/
           <Route path="admin/users" element={<AdminUsers />} />/
        </Route>

// wrap every page with layout component as usual, for styling(headers, nav, footer) and pass title
________________________________________________________________________________________

________________________________________________________________________________________
now, user (normal user) dashboard✨✨
user dashboard - pages will be (profile, orders) - (not/ unlike add admin/create cat./ create prod. )
______________________________________________________________________________

______________________________________________________________________________
now, basic ecommerce:
create products->api->fetch->presentation
🛒🛒

let's first, correct (manual url issues), 
the admin route is working fine, routing to homepage if admin manually edit url to user

but user(normal user) on editing url manually gets error then..
so, 
1.) middlewares/ → Contains authMiddleware.js (we'll review this first)
2.) routes/ → Contains authRoute.js (we’ll verify the /admin-auth route)
3.) controllers/ → Contains authController.js etc.

Token storage	✅ Stored in localStorage as auth.token
Token sending	✅ Sent in Authorization: Bearer ${token} format
Middleware updated	✅ requireSignIn now correctly extracts token
isAdmin middleware	✅ Checks user.role === 1 correctly
AdminRoute frontend	✅ Redirects normal users (role !== 1)
authCheck()	✅ Uses Axios with correct headers and state logic
Route protection	✅ admin-auth uses both requireSignIn and isAdmin
----------------
normal users "role": 0
advanced users(admin) "role": 1
// while 401 is still there, but for admins (on editing url to user manually) also started taking time
______________________________________________________________________________

______________________________________________________________________________
carry on, create products->api->fetch->presentation
🛒🛒
Last  UX enhancement: useLocation hook usage in Spinner.js
---------------------
###> User tries to open /dashboard/user (or /dashboard/admin), the normal /dashboard route is homepage redirected...
But they’re not logged in🚀🚀

You redirect them via <Spinner />, and remember where they came from:
✅ If a user tries to open /dashboard/user or /dashboard/admin without being logged in, they get redirected to /login, and
✅ After login, they are sent back to where they originally intended to go.
 // Redirect based on:
      // 1. Previous location (anything other than /dashboard routes)
      // 2. User role fallback
      if (location.state) {
        navigate(location.state);
      } else if (userRole === 1) {
        navigate("/dashboard/admin");
      } else {
        navigate("/dashboard/user");
      }
---------------------
// CREATE new model for category📌📌 
// models->categoryModel.js(2nd model) (i.e 1st model is userModel- users task is over)
💾💾
new package (slugify), we will use hypen/dash instead underscore (package correctly installed in node server)
------------
then // routes ->categoryRoute.js (2nd route)
then // controllers ->categoryController.js (export createCategoryController) (2nd controller)
// we will create 5 functions(controller parts) of/for categoryController...

// Now in SERVER.js (just like done for authRoute, do for categoryRoute)
--------------------
import express from "express";
import dotenv from "dotenv";
import cors from "cors";
import connectDB from "./config/db.js";
import authRoutes from "./routes/authRoute.js";

// routes
app.use("/api/v1/auth", authRoutes);
app.use("/api/v1/category", categoryRoutes)
______________________________________________________________________________

______________________________________________________________________________
then createCategoryController:

// mention async, it is callback so req, res
// 📌keep extensions to files names or it won't work (i.e this will not work - import categoryModel from "../models/categoryModel";)

//📌use forward slash(not backslash/backward slash) in categoryRoute at beginning of url(router.post('create-category', requireSignIn, isAdmin, createCategoryController)) so create-category will become /create-category

// test with rest api client (for e.g postman), use headers, i.e Authorization(admin logged token) along with body (i.e name of category-(body->raw(json), property and value -double quoted))
// if get instead post, than 404(http://localhost:8080/api/v1/category/create-category)...

new collection will get created(category)
new documents will get inserted into that collection on each request success(create category) 
mongoDB done the task...
______________________________________________________________________________

______________________________________________________________________________
// in routes-> categoryRoute.js
//for update category
use put(neither get nor post) along url pattern '/update-category'

//now, within same file(controller-> categoryController)
below export createCategoryController, export updateCategoryController🎉🎉

then within function export updateCategoryController🎉🎉(LOGIC)
destructure name (as usual - from body(req.body))
but destructure id (from params (url))
//  const {name} = req.body
//   const {id} = req.params🎨🎨
-------------------

// new:true(parameter)⚡⚡ is necessary to update, (it is not defined in model)- 
// category = await categoryModel.findByIdAndUpdate(id,{name, slug:slugify(name)},{new:true})

// 💀💀as we are dynamically updating category so, in categoryRoute, inside url pattern(:id) is necessary - '/update-category/:id'

// now test using postman(restapi client)
for e.g put (http://localhost:8080/api/v1/category/update-category/686abbe5734d234b8c202274)
copy id from mongodb compass for that new collection(category), the previous document(we changed the "mobile phones" to "kids collection")

----------
// update query is working as intended
// now, get (all category) route in categoryRoutes (WE WILL NOT include any middleware, as we have to show category even if user is not logged in)

// create new function->allCategoryController in controller->categoryController
// on success, status of 200(i.e res.status(200) .send({..., category}))

// Note, as in server.js, we used category(app.use("/api/v1/category", categoryRoutes)), so can't use category keyword again in categoryRoute(router.get('/category', allCategoryController))

Now, test with postman, GET(http://localhost:8080/api/v1/category/get-category)
will showcase all categories list
______________________________________________________________________________

______________________________________________________________________________
now, singleCategoryContoller (create) and add routing just like update/create 

// modify QUERY, update-category(used :id), but single-category(will use :slug)
//while routing, use(colon slug) i.e /single-category/:slug

// test postman (get single category (it will require slug(e.g mobile phones) not id))
we tested (slug = ear-buds), i.e http://localhost:8080/api/v1/category/single-category/ear-buds

______________________________________________________________________________

______________________________________________________________________________
now deleteCategoryController (after create, update, read)
// using '/delete-category' will DELETE EVERYTHING so, use id ('/delete-category/:id')

// so finally res.status(200).send({success: true}) // deleted category
// test postman,(method=delete) e.g http://localhost:8080/api/v1/category/delete-category/686aca5c41f5df64ee78ed49(along headers(authorization)) -admin logged token

________________________________________________________________________________________

______________________________________________________________________________
🎃Now same for products (just like categories),
3rd model(productModel.js) the Model-view-controller....
then routing(productRoutes.js, each route of crud along with its controller-functions),,, ... functions(for crud in productController.js)

Note: the mandatory route: (specify main route in SERVER.js), just like followings:
app.use("/api/v1/auth", authRoutes);
app.use("/api/v1/category", categoryRoutes)
----------
-------------
--------------
(So, after - CATEGORY API, NOW - PRODUCT API🔔🔔)
---------------
---------------
------------------
// 1.> start with productModel.js(for the very basic - database)

Within productModel.js
// the category object used in schema will have:
category: {
 type: mongoose.ObjectId,
 ref: "Category",

 // the photo object used in schema will have:
 // Note: we will not use type: Buffer (type never equals to Buffer❌)
 photo: {
      data: Buffer,
      contentType: String,
---------------------------------------

// 2.> then specify routing/routes for different crud operations(for the very basic - connect controllers) in productRoutes.js

// within create(post) and update(put) routes, we will use Formidable(formidable())as middleware, for parsing incoming form data(the photos🎦(file uploads))...

// i.e used in production, for file stream, 
// formidable(node.js package) have various versions v1, v2, v3, v4, [ express-formidable is dependent on formidable(formidable with regular updates is core, low level library() which can be used without express.js⚡⚡)]

//express-formidable : The "Parser" Middleware (Parses multipart/form-data)

(as in official npm libraries docs:)

Ques. What are Express, Formidable, and this?
Ans. Express is a fast, unopinionated, minimalist web framework for Node.js.
Formidable is a Node.js module for parsing form data, including multipart/form-data file upload.
So, express-formidable is something like a bridge between them, specifically an Express middleware implementation of Formidable.

-------------------------------

// 3.> then, as specified in routes, create Controller along with functions(controller parts)(for the very basic - crud operation logic- create, update, read, delete) in productController.js

// we will create 6 functions(controller parts) of productController/-

//within productController= we will use fs(Node.js module/LIBRARY), (FOR PHOTOS🎦(file upload))
// fs/file-system (core node.js module)
// i.e while create product = products.photo.data = fs.readFileSync(photo.path)
// i.e and while update product = products.photo.data = fs.readFileSync(photo.path)

// test with postman,
// add product api to server.js (i.e app.use)
//test all six functions(controller parts)

for create category function in productController;
// we taken 10 mb size,

test with postman, (use form-data in header as it shows 2 options(text/FILE), not possible in raw)
// body->form-data (not body->raw), along header(auth -admin token🙏), no params(p.)/query p.(url)
// fill up, form (along files), the fields which are in createProductController(controller parts)
// shipping set to (no required) - so, not mandatory

⚡⚡💀 fields differs from files(form-data=text/file)
try{
const { name, description, price, category, quantity, shipping } = req.fields;
const { photo } = req.files;

❌❌postman testing create product got error: (Internal server error-> 500)
"success": false,
    "error": {
        "errors": {
            "category": {
                "stringValue": "\"neckband\"",
                "valueType": "string",
                "kind": "ObjectId",
                "value": "neckband",
                "path": "category",
                "reason": {},
                "name": "CastError",
                "message": "Cast to ObjectId failed for value \"neckband\" (type string) at path \"category\" because of \"BSONError\""
            }
        },
        "_message": "Products validation failed",
        "name": "ValidationError",
        "message": "Products validation failed: category: Cast to ObjectId failed for value \"neckband\" (type string) at path \"category\" because of \"BSONError\""
    },
    "message": "Error in crearing product"

✅✅ we have to pass category id, not name

// Now 1st ecommerce site- product created successfully (201 - created)
{
    "success": true,
    "message": "Product Created Successfully",
    "products": {
        "name": "noise airwave",
        "slug": "noise-airwave",
        "description": "best neckband from noise",
        "price": 1000,
        "category": "686c84196f0b3d14343c2e28",
        "quantity": 1,
        "photo": {
            "data": {
                "type": "Buffer",
                "data": [
                    82,
                    73,.................. it goes util 20k lines(20,000)in our system, then
.....................................            ..................
                    ........................
                     "contentType": "image/webp"
        },
        "_id": "686c84456f0b3d14343c2e2b",
        "createdAt": "2025-07-08T02:36:53.403Z",
        "updatedAt": "2025-07-08T02:36:53.403Z",
        "__v": 0
---------------------------------------------------------------------

// product will get saved to mongoDB (as the structure defined in productModel)...
// in our example:::

_id = 686c84456f0b3d14343c2e2b (objectId)

name = noise airwave (String)

slug = noise-airwave (String)

description = best neckband from noise (String)

price = 1000 (Int32)

category = 686c84196f0b3d14343c2e28 (ObjectId)

quantity = 1 (Int32)

✅✅photo = Object (Object)
---------------------------------
// the object expanded...
data = Binary.createFromBase64('UklGRixLAABXRUJQVlA4WAoAAAA4AAAA8wEA8wEASUNDUKgBAAAAAAGobGNtcwIQAABtbnRyUkdCIFhZWiAH3AABABkAAwApADlh…', 0) or full one(UklGRixLAABXRUJQVlA4WAoAAAA4AAAA8wEA8wEASUNDUKgBAAAAAAGobGNtcwIQAABtbnRyUkdCIFhZWiAH3AABABkAAwApADlh) (Binary)

contentType = image/webp (String)
----------------------------------

createdAt = 2025-07-08T02:36:53.403+00:00 (Date)

updatedAt = 2025-07-08T02:36:53.403+00:00 (Date)

__v = 0 (Int32)
---------------------------------
// test other renaming 5 functions (just like we tested category-5 functions)
// now test whole product api, just like category api

// api's testing
Now, test get product = http://localhost:8080/api/v1/product/get-product
// no headers && body required,,

"success": true,
    "counTotal": 1,
    "message": "ALlProducts ",
    "products": [
        {
            "_id": "686c84456f0b3d14343c2e2b",

// now test get single product (pass product slug(slug...(slug= url slug or just url at end)))
//get request 
http://localhost:8080/api/v1/product/get-product/noise-airwave

{
    "success": true,
    "message": "Single Product Fetched",
    "product": {
        "_id": "686c84456f0b3d14343c2e2b",
        "name": "noise airwave",
        "slug": "noise-airwave",
        "description": "best neckband from noise",
        "price": 1000,
        "category": {
            "_id": "686c84196f0b3d14343c2e28",
            .....

// 4th function, get product photo (pass product id)-objectId
// no headers and body, it showcase photo, in preview(in postman or otherwise hex code)
http://localhost:8080/api/v1/product/product-photo/686c84456f0b3d14343c2e2b

// Update product && delete product will be same (5th and 6th)✍✍

// update product: (pass product id) - created one more product then test done...
http://localhost:8080/api/v1/product/update-product/686dc726f3d0b484fbeef53b
{
    "success": true,
    "message": "Product Updated Successfully",
    "products": {
        "photo": {
            "data": {
                "type": "Buffer",
                "data": [
                    82,
                    73, ............ 60k lines
                  },
            "contentType": "image/webp"
        },
        "_id": "686dc726f3d0b484fbeef53b",
        "name": "realme Buds Wireless 3 Neo plus",
        "slug": "realme-Buds-Wireless-3-Neo-plus",
        "description": "best neckband from realme",
        "price": 1200,
        "category": "686c84196f0b3d14343c2e28",
        "quantity": 1,
        "createdAt": "2025-07-09T01:34:30.665Z",
        "updatedAt": "2025-07-09T01:37:22.631Z",
        "__v": 0

// delete product: (pass product id), if product gets deleted, then that product(or doc) photo also gets deleted...
// in delete query, we excluded photo, due to following reason..
❌Deletes the product, including photo= await productModel.findByIdAndDelete(req.params.pid)

✅Same as above, but if you want to use the deleted data afterward (e.g., send as response), you'll get it without the heavy photo = await productModel.findByIdAndDelete(req.params.pid).select("-photo")
http://localhost:8080/api/v1/product/delete-product/686c84456f0b3d14343c2e2b
without header(auth- admin-token), error: NO TOKEN PROVIDED

// WITH token : - 200(ok)
{
    "success": true,
    "message": "Product Deleted successfully"
// all 6 product functions tested(of product controller) - whole product api

(MAY BE)postman - mock server will be used, if some other api's needed for just testing purposes in frontend:
mock server = A Mock Server in Postman is a fake API server that simulates real API responses — without any backend code actually running.

?postman - current app -collection(with folders(& requests))'s current state in json:
https://api.postman.com/collections/26088248-0cd11988-45ad-4626-84e5-2af949792f31?access_key=PMAT-01JZPFPGWST96F099XJ6G7CMVE
______________________________________________________________________________

______________________________________________________________________________
FRONTEND FRONTEND FRONTEND FRONTEND FRONTEND  FRONTEND FRONTEND FRONTEND FRONTEND  FRONTEND FRONTEND  FRONTEND FRONTEND FRONTEND FRONTEND  FRONTEND FRONTEND

A recap to current project state:
✅✅so in frontend src(SRC) folder, we currently have components, context, pages, styles(4 sub-folders)...

// (IN CONTEXT folder) - no sub-folders

// (IN STYLES folder) - no sub-folders

// (IN PAGES FOLDER)pages folder have pages -about/contact/pagenotfound/home/policy...
 (and 3 main pages folder i.e admin(dashboard with sub-parts), auth(login, register, forgot..), user(dashboard with sub-parts))... 

 // (IN COMPONENTS FOLDER))a component(among currently 4 sub-folders(components)- layout(for header-footer), menu, routes(private/user & adminRoute), spinner,, -------is dedicated to those dashboard pages folders i.e the menu component folder(component) with userMenu, adminMenu... (having NavLink's to different actions/routes...))
______________________________________________________________________________

______________________________________________________________________________
Now, we will display category,& perform crud (within admin panel(custom -not as good as wp admin))
----------------
so, in pages(main parent folder), - edit the createCategory.js within(admin child folder)
// as category crud should only be for admin privileges one...

useEffect, useState(hold effect changes i.e useEffect changes)... (createCategory(admin child-folder sub-page(among other adminDashboard,adminUsers,createProduct..) ))..

// and while getting categories, use notifications to let admin know if there any user in getting categories... by (import toast from "react-hot-toast";)

// then axios(to send network request), and destructure response to get data... and store using useState, then begin initial lifecycle using useEffect (and call function on initial lifecycle-for network-axios function- url pattern.../api/v1/category/get-category)

// for mapping & showcase in FRONTEND, (admin panel)
use bootstrap, table..
// bootstrap framework breakthrough...
classes:
-----------
Bootstrap provides 7 main things to developers(to implement designers' design);...
🎃 The Customize section empowers developers to tailor the framework using Sass variables, global options, color palettes, and CSS variables — making Bootstrap flexible for any brand or theme. 🎃 In Layout, you’ll find tools to build structured, responsive designs using containers, grids, columns, breakpoints, and utilities like z-index and CSS Grid. 🎃 The Content section handles core HTML elements like typography, images, and tables, styled consistently across browsers with Bootstrap’s Reboot.

🎃 Forms provide everything from styled inputs and selects to validation and floating labels, all customizable and accessible. 🎃 The Components library includes UI building blocks like modals, navbars, buttons, alerts, and carousels — designed to work seamlessly out of the box. 🎃 Helpers offer quick tweaks like clearfix, aspect ratios, and text truncation without writing extra CSS. 🎃 Finally, Utilities include powerful, ready-to-use classes for spacing, sizing, colors, flexbox, display, and more, making layout adjustments quick and consistent across your project.

we will use tables.. i.e part of content...
https://getbootstrap.com/docs/5.3/content/tables/ 

// paste table and convert to jsx
// show tr <table row> dynamic using map() method... ( in tr there is also th, td..)
// no columns concept in table,(i.e no tc but there is scope="col"> and scope="row">)

// 1st tr will have two cells( which is inside<thead> wrapping), (th are shown in bold)
then... tr's in <tbody> are dynamic ones...

// there is error, may be spelling mistake or something out of the box...
after checking categoryController (we got to know we are having data.category in response) or just check console logs...










