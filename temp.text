📌📌
________________________________________________________________________________________
http://localhost:8080/ 😎😎😎😎😎😎😎😎😎😎😎😎😎😎😎😎😎😎😎😎😎😎😎😎
// BACKEND BACKEND  BACKEND BACKEND BACKEND BACKEND BACKEND BACKEND BACKEND BACKEND BACKEND BACKEND BACKEND BACKEND BACKEND BACKEND BACKEND BACKEND BACKEND BACKEND BACKEND BACKEND  BACKEND BACKEND BACKEND BACKEND BACKEND BACKEND BACKEND BACKEND BACKEND BACKEND BACKEND BACKEND BACKEND BACKEND BACKEND BACKEND BACKEND BACKEND 
http://localhost:8080/
________________________________________________________________________________________
📌📌
________________________________________________________________________________________
// added 5 folders besides basic(config folder containing db-connect file) for mvc of web-app

// keep the separation of concerns, like helpers(or utils), routes, controllers, models, middlewares 👀  (5) essentials..

________________________________________________________________________________________
📌📌
// MODEL ________________________________________________________________________________________________
________________________________________________________________________________________
// we create a model, 1st one is userModel where we define userSchema (for new website visitors tracing), and saving to database

________________________________________________________________________________________
📌📌
// ROUTE _______________________________________________________________________________________________
________________________________________________________________________________________
// we create routes, 1st is auth Route (for new users ), for proper app routing the new users data to database(creating route through ExpressJS)

// as we following mvc, 😎

________________________________________________________________________________________
📌📌
// CONTROLLER ________________________________________________________________________________________
________________________________________________________________________________________
// we create controllers for routing , 1st is (authController), authController will contain register, login ...

________________________________________________________________________________________
📌📌
// HELPER __________________________________________________________________________________________
________________________________________________________________________________________
// we will now create a Helpers, (1st is authHelper) for functions like registration, passcode encryption/hashing and comparison

// registration api working, mongoDB and all📌

// but now we secure app using JSON web token🙏

// jwt ( JSON web token) will provide token (custom/self written jwt-secret) during login, 

// so during-login, password decrypted(un-hased #) (loginController decrypt password) and token provided(with expiry if there)

// login api working, mongoDB and all📌

// for jwt sake and usage,

________________________________________________________________________________________
📌📌
// MIDDLEWARE ___________________________________________________________________________________________________
________________________________________________________________________________________
// we create middleware(s) to protect every other route, after register and login, like requireSignIn(for decrypt TOKEN and checking in every route request except register/login), 

// create second middleware isAdmin(for checking ADMIN privileges)

________________________________________________________________________________________
📌📌
http://localhost:3000/ 😎😎😎😎😎😎😎😎😎😎😎😎😎😎😎😎😎😎😎😎😎😎😎😎
// FRONTEND FRONTEND FRONTEND FRONTEND  FRONTEND FRONTEND FRONTEND FRONTEND  FRONTEND FRONTEND FRONTEND FRONTEND  FRONTEND FRONTEND FRONTEND FRONTEND  FRONTEND FRONTEND FRONTEND FRONTEND  FRONTEND FRONTEND FRONTEND FRONTEND  FRONTEND FRONTEND FRONTEND FRONTEND  FRONTEND FRONTEND  FRONTEND FRONTEND FRONTEND FRONTEND  FRONTEND FRONTEND
http://localhost:3000/
________________________________________________________________________________________
________________________________________________________________________________________

// (MUST) add bootstrap 5 to frontend/public/index.html 😎

// (MUST) remove all css (eg. app.css, index.css) (i.e Globally index. and very-first Component-App.)

// (MUST) add css (index.css - i.e. global) as the (backend has server.js && frontend has index.js)

// note: browser sees index.html (as browser requests/receives index.html) WEBPACK-👀 injects automatically <script> tag for index.js to index.html (DURING BUILD PROCESS) 

// create components and pages folder -------------------------
// pages would have navigations, routing, ....................

// 1st component- LAYOUT.JS (app.js is 1st but given to us, so assume it 0th component(app.js)📌) (consume header && footer in Layout component for later use)
________________________________________________________________________________________
📌📌
// FRONTEND - props (----------------------------know-how)
________________________________________________________________________________________
________________________________________________________________________________________

// props spelling not must to be correct, it's just an object😅 (it can be porps, popcorn)

// create a layout component with header and footer, (LAYOUT COMPONENT FOR FLEXIBILITY eg. header, footer and later in future->sidebar)

// WORKING 1st define component with prop e.g... const MyComponent = (props) => { // ...}; (PROPS PARAMETER IS AN OBJECT)

// USAGE 2nd use component with props e.g... <MyComponent msg="Hello" name="Rohit"/> // // Inside MyComponent, the props object will be 
    {
    msg:"Hello",
    name:"Rohit"
    }

// children (i.e. as in props.children) is a SPECIAL PROP, Layout component is parent, and whatever in between that would be children automatically

// {obj} DESTRUCTURING allows to unpack properties/keys (obj=key-value pair) from {ojb} into vars

// so, children is special prop, and whatever regular props have to define can be destructured along this special prop, e.g
// const Layout = ({ children, showFooter }) 
// showFooter is regular prop 

//   <Layout showFooter={true}>
//        <h1>Page 1 Content</h1>
//   </Layout>
________________________________________________________________________________________

// mern app = spa(single page app) so routing(i.e react-router-dom package) necessary📌

// use BrowserRouter😃 i.e from rectroutDOM, (main file - index.js)

// create different pages, (i.e. home, about, contact, ... wrapped in our LAYOUT)

// remove 0th component(app.js) <h1>Ecomm app</h1> 
// i.e.   <Layout>
// <h1>Ecommerce App</h1>
//  </Layout>

// import Routes, Route for app.js along with nav links to pages
________________________________________________________________________________________
📌📌
// FRONTEND - router (----------------------------know-how)
________________________________________________________________________________________
________________________________________________________________________________________
// use Routes as CONTAINER, and Route for specificity(subjects-pages)

// use paths along their elements...
// eg. path="/" element={<HomePage />}, path="/about" element={<About/>} etc.

// use  <Route path="*" element={<Pagenotfound />} /> (AFTER ALL ROUTE) 😎😎😎 for everything

// BECAUSE ✅ 200 - success, 🔁 300 - redirects, ❌ 400 - client errors, 💥 500 -server errors
// ℹ️ 100 - informational (i.e. 100 continue- client can continue with request, 101 Switching Protocols- Protocol change (eg. HTTP to WebSocket))etc.
________________________________________________________________________________________

// DESIGN--  RE-Design (header, footer)

// visit getbootstrap.com (for CSS - header-navbar)

// Now, in place of anchor(<a>), Usage of NavLink (from REACT ROUTER DOM) take place...

// After pasting any boilerplate code or little template snippets, use COVERT HTML TO JSX, (like for eg. bootstrap navbar) --- 😎😎 Because CLASS changes to CLASS_NAME

// .gitignore in parent(backend folder) ignores /public for backend but not of child-FRONTEND(client/public) using client/public/* && !client/public/robots.txt, !client/public/img

// Style navbar with react icons and link, navlink-to and custom css (😌link for internal linking, navlink for beautiful styled links in menus,navs,headers)

// Ensure fonts properly, BOOTSTRAP by default provides- roboto font, FALLBACK(sans-serif) for each fonts use, (import others as required)

// besides REACT -icons, :emojisense: VS-CODE EXTENSION ___ctrl+i eg.shopping cart icon for logo 🛒

// 💯 FOOTER - with links 

// after Header, Footer done, on going to pages --> page title not changing (We should make it SEO💡 friendly)...

// Currently we not have routes for /category /register /login /cart (where we will show as all other not existing routes, Page not Found )

// GIT COMMANDS, from commits to merging and all..................... GIT🎁 (Github DESKTOP app = Focus on what matters instead of fighting with Git) example: use github app for ammending(commit message) and then git push --force (for altering commit in that main repo from where it is cloned)...

// REACT - by default not supports SEO, (third party packages) and other fundamentals for GOOGLE to consider your software to be ranked.... (eg. meta tag)

// so, as Meta tags gets static/hard-coded not dynamic, so React-HELMET (keywords, description)...

// Layout.defaultProps 🍕🍕🍕 (OBJECT😅) for default ones if no props gets passed,  (eg. in layout wrapping each page, title-description && -keywords for whole ecommerce site), or otherwise pass props from each page (100% seo), other packages later...

// issues with React-helmet package, some of good latest packages are react-helmet-async🍜

// use * instead /* for non exising pages- routes....

// Now Register and other pages like login (rafce - react arrow function with export (VS CODE SNIPPET))

// Register page - FRONTEND

// use bootstrap for register .. & login page template

// ////////////////////////////////////////////////////// Register page /////////////////////////////////////////////
📌📌
📌📌
// importing packages in client(frontend) and main directory(backend) differs a little as backend directory - package.json mentioned (type:"module") but
// While We can use the .js extension for local modules in ES6 imports,but many libraries, including JWT, may not require it due to historical reasons and compatibility with older Node.js versions

// Register form termplate from bootstrap-5 docs && then convert HTML to JSX

axios (for http client) & toastify (for notifications) -

cors (for connecting two servers =  ports 8080 && 3000 causing cross - origin conflict) // so cancel errors related to origin

concurrently ( for npm start - both client and server in single command)

------------axios -  `${process.env.REACT_APP_API}/api/v1/auth/register`, ((SEND DATA OF REGISTER FORM TO BACKEND))
--as defined ✨in auth route - post register for method, we will send form data to the register controller (i.e to the auth controller) having following::

-------------------------------------
 res.status(201).send({
      success: true,
      message: "User registered successfully",
 })
-------------------------------------

///////////////////////////////////////////////////////  Register page ends //////////////////////////////////////////////////
📌📌
📌📌
________________________________________________________________________________________
From now on, just run (npm run dev) for development of both frontend and backend (run in just 1 cli)

npm run dev 

> ecommerce-app-7@1.0.0 dev
> concurrently "npm run server" "npm run client"
________________________________________________________________________________________


________________________________________________________________________________________
💀💀💀
For following error, remove <React.StrictMode> <React.StrictMode> from index.js 

Using UNSAFE_componentWillMount in strict mode is not recommended and may indicate bugs in your code. See https://react.dev/link/unsafe-component-lifecycles for details.

* Move code with side effects to componentDidMount, and set initial state in the constructor.

Please update the following components: SideEffect(NullComponent)
________________________________________________________________________________________


________________________________________________________________________________________
💀💀💀 🦊🦊🦊🦊
For following error,
firefox console showing (UNDEFINED) within post request url !!!
http://localhost:3000/undefined/api/v1/auth/regis

FOR THAT, W-E  A-D-D-E-D  P-R-O-X-Y not normal .env variable
> package.json, add "proxy":"http://localhost:8080
---------------------------------------------------
  "name": "client",
  "proxy": "http://localhost:8080",
________________________________________________________________________________________


________________________________________________________________________________________
💀💀
react -toastify not showing up 
on success user registatin navigate to login
so - ANOTHER PACKAGE RE-PLACEMENT (react -hot -toast)
________________________________________________________________________________________

________________________________________________________________________________________
📌📌
created a styles folder in src (of frontend i.e client)
AS INLINE-CSS is OLD, (CAUSES WEBSITE SPEED ISSUES)
we created authStyles css file for forms-authPages
________________________________________________________________________________________

________________________________________________________________________________________
📌📌
after login form -> html && css
controller already setup (setup already done)
route already setup (setup already done)
________________________________________________________________________________________

________________________________________________________________________________________
📢📢📢📢
We will use CONTEXT API for this project, not redux-toolkit

Nothing to install, react already provides CONTEXT (function(i.e hooks) based, )

let's create CONTEXT
________________________________________________________________________________________
❓❓❔❔
unpredicted - Login page getting css automatically without explicitly defining import "../../styles/AuthStyles.css";

(🌟 CONTEXT-APi + LOCAL-Storage ---> SURVIVES REFRESH___________)
Ok, now STORE LOGIN credentials to -> CONTEXT API -> LOCAL STORAGE, before homepage redirect

--- after some chat gpting;💀💀💀
i got to know = Because CSS is global in React unless scoped🚑🚑🚑

-- so thing to always remember (css is global in react unless -- css modules for scoped styling or just have css imports in app.js - laziness at extreme)
// for now, moving that css import to app.js (to showcase, it is done as per intention- sharing to both form pages)

// key note: to keep styles isolated to a single component,, IT OUGHT TO USE - css modules🚑🚑
________________________________________________________________________________________

________________________________________________________________________________________
💡💡💡
So, to persist Context API state across page refreshes,  (login - credentials)
we explicitly stored and retrieved data using client-side storage (LOCAL STORAGE)

after 1st login redirect- >>>>SET_AUTH of Login-page works until refresh<<<<<<, then on refresh(homepage refresh, so did our CONTEXT API CODE calling LOCAL-STORAGE for Login-credentials)
________________________________________________________________________________________

________________________________________________________________________________________
⚡💀⚡⚡❔❓❓
 error:
 Maximum update depth exceeded. This can happen when a component calls setState inside useEffect, but useEffect either doesn't have a dependency array, or one of the dependencies changes on every render.

 in context api folder (nested in src folder of frontend), auth.js for (context api- global storage for login credentials), I got provided with knowledge to use (auth, setAuth)

 but error gone after removing [auth] from dependency array, as it is triggering infinite loop.

 what i know: blank dependency array run once.
 what i got to know(this error): We are initializing state from localStorage, so there's no need to watch auth for changes.

 // then i discovered (which exists, but i not found yet, or my small brain not catched)

 for cancelling linter (e.g eslint) issues (we done that)
✅ // eslint-disable-next-line

which only & only applies to the very next line
// that prevented eslint warning ---
----------------------------------------- for example below
useEffect(() => {
  console.log(auth);                // <-- used here
}, []);                             // <-- not included here
---------------------------------------------
As, eslint says:
ESLint says:
⚠️ React Hook useEffect has a missing dependency: 'auth'. Either include it or remove the dependency array.

//now question arises
// ❓ But Why Does This Matter?
// ✔☑✅ Including dependencies ensures the effect always runs with the latest values.

------------ IMAGINE
useEffect(() => {
  if (auth.token) doSomething();
}, []);
---------------
🚑🚑🚑
If auth.token is updated after mount — this effect will never re-run, and you'll miss that token change. That’s what the ESLint rule is trying to prevent. (T-O-K-E-N🙏)
 ________________________________________________________________________________________

 ________________________________________________________________________________________
🏆🏆🏆
🥇🥇🥇
LIVE PROJECT WORKING ON THIS STATE, THE FRONTEND IS IN THE VERCEL, THE BACKEND IS IN THE RENDER, OTHER FREE BACKEND DEPLOYMENT OPTIONS Currently
NOT FREE / E.G CYCLIC, RAILWAY, (RAILWAY DOES PROVIDES SOME FREE TIER BUT FOR SOMETIME, AFTER THAT IT ALSO STOPS WORKING)

// A FACT:
🚫 Don't use import.meta.env unless you're using Vite. (as Render - free backend DEPLOYMENT also runs using process.env for dynamic url for cra apps)
________________________________________________________________________________________
________________________________________________________________________________________

🔥🔥🔥making use of a variable (for making both frontend and backend work)
  const API =
    process.env.NODE_ENV === "production" ? process.env.REACT_APP_API : "";

    using in register/login for (working on both local machine and at production without mis-configuring anything, (frontend using proxy(in package.json stating backend url - http://localhost:8080) so, not need for url))

    🧭🧭🧭(the magician here) = process.env.NODE_ENV
This is automatically injected by React Scripts (from react-scripts) to tell the app which mode it's running in:
--------------------------------------------------------
"development" — when you run npm start

"production" — when you run npm run build
________________________________________________________________________________________
________________________________________________________________________________________
🐐🐐🐐
not console logs in production (to prevent cluttering)
or
lowering user experience
________________________________________________________________________________________

________________________________________________________________________________________
create a user dashboard page;;; 
i.e user page -> dashboard 

// then a new Component(2nd component = Routes) = components -> Routes(Private.js) (i.e a private component after routing passing all checks of protected route), (1st component = Layout is generic one for scaffolding every page as we know-desinging purpose)

// for nested routing
-- we use <OUTLET> (react-router-dom)
________________________________________________________________________________________

________________________________________________________________________________________
then,
 include axios header(which we trying to do in - GLOBAL (i.e CONTEXT API))
 // we set axios defaults, not app-BASE-URL for now, but axios requests headers
 // axios.defaults.headers.common['Authorization'] = auth?.token;
 ---- 2nd component(Routing, 1st one is LAYOUT) ->private.js -- for token-checks, auth-checks
 ----- that also recalls of that useEffect dependencies check -i.e OUGHT TO INCLUDE token-checks variable e.g auth?.token to dependency array [], // the EDGE-cases es-linter tries to prevent

 i.e do the following globally (not repetitive - kind of like programmatic seo - bots fills data on every creation without 
 seo persons intervention)
-------------------------------------
  headers: {
          Authorization: auth?.token,
        },
---------------------------------------
   // the auth?.token works behind the scenes as conditionally executing further code - after auth only if yes
  // (i.e if auth then only auth.token - By condition(auth?.token))

Now, we can remove the 2nd object😅

Before:
  const res = await axios.get(`${API}/api/v1/auth/user-auth`, { headers: { Authorization: auth?.token } });

After:
  const res = await axios.get(`${API}/api/v1/auth/user-auth`, );
  const res = await axios.get(`${API}/api/v1/auth/user-auth`);
________________________________________________________________________________________

________________________________________________________________________________________
get spinner, (get.Bootstrap😃), 
for now, we are using --- ----- rotating ring spinner

// just out of curiosity:
/// 2 spinners in (get bootstrap)
------------------------------
.spinner-border — the rotating ring

.spinner-grow — the pulsating grow spinner
-------------------------------
we will go for Placement (for that .spinner-border) 
for: Use flexbox utilities, float utilities, or text alignment utilities to place spinners exactly where you need them in any situation.
________________________________________________________________________________________

________________________________________________________________________________________
📌📌
3rd component - spinner 
copy bootstrap (.spinner-border -> Placement) 
then convert html->JSX
________________________________________________________________________________________

________________________________________________________________________________________
🏓🏓
Private Route in action (2nd component magic)

(within App.js)
Before:
 <Route path="/dashboard" element={<Dashboard />} />

 After:
   <Route path="/dashboard" element={<PrivateRoute/>}>
              <Route path="" element={<Dashboard />} />
   </Route>
________________________________________________________________________________________

________________________________________________________________________________________
now,
in 3rd component(Spinner), add logic (to not just show infinite looping animation - circle spinning)

useNavigate
useState
useEffect - No useEffect(() => {}) --- it will run on every render (one of worst cases..), array(dependency array[]) even if it is blank, tells to not re-run it on updates
🎉🎉
but for now, we are using useEffect (without condition-checks i.e auth?.token or execute further only if it is presence) and passing 2 values to dependency array [count, navigate] 
---- Long live Spinner.js (a very good component!!!)
________________________________________________________________________________________

________________________________________________________________________________________
🛺🛺
Accidentally, clicked INS key (secondary keyboard i am using for programming)
---------------------------------
VS Code, like many text editors, supports two modes:

1. Insert Mode (🟢 default): text is inserted at the cursor.
2. Overwrite Mode (🔴 problem): new text replaces existing text at the cursor.
----------------------------------
Pressed INS again, and the problem is gone...
________________________________________________________________________________________

________________________________________________________________________________________
in 3rd component(spinner.js)
which contains logic as of now, for redirecting to login (if trying to access protected /dashboard), & dashboard(for loged in users)

reduced 5 seconds -> 3 seconds (the time website assumes good to reduce users bouce rate, time after which users exits site)
________________________________________________________________________________________

________________________________________________________________________________________
📌📌
now User -experience (implement user location history, where does user navigating or trying -- kind of navigational keywords in google(eg. gov schemes, 
--company --service, pizza domminos))
-- why benefit?
assume, user has saved some product in cart,, or maybe he/she has a link(e.g checkout)
so if he/she login -> and our app throw him/her to homePage then user get confused(is it a good navigation, or my device problem)

spinner.js = access route from url(even if it is un-authorized, we re-direct it to /login, then on login-success, re-direct to /route they want to access )
// Destination without showcasing home-page un-necessarily 
✨✨useLocation hook (from 'react-router-dom')
________________________________________________________________________________________

________________________________________________________________________________________
⚡⚡⚡useLocation ...
the hook, not changes the spinner.js useEffect's dependency array vars from [count, navigate] to [count, navigate, location]

and also, LOGIN.js ---- no more just 
navigate('/') on formSubmit function, it get conditional - checks (some dynamics)
________________________________________________________________________________________

________________________________________________________________________________________
Now, role base authentication 💀💀
// let's create FORGOT-PASSWORD FUNCTIONALITY🎨🎨
add some secret key in model(i.e userModel) - like question; (question naming is confusing, so finally- answer)

create new END-POINT
in authRoute.js -> forgotPassword

But as per naming conventions and confustion prevention = question->answer... (change that key naming in the user model)
added -> authController ->forgotPassword()

now, give page(Register.js) the forgotPassword functionality (new field during register = answer);
// question chosen for filling up answer value = What is your favourite sports
now, give page(login.js) -> forgot password button below login button

now, create new auth page(just like login/register) -> forgotPassword.js
and then route to that auth page(forgotPassword) inside APP.JS

then, add that answer-> authController -> registerController(the 1st controller user form filling logic)
________________________________________________________________________________________

________________________________________________________________________________________
// some forgot-password form error
so removed client= frontend(package.json statement)
 "proxy": "http://localhost:8080",

 instead of that, we manually added; http://localhost:8080 to each forms- register, login, forgot-password
✅ CORS is a backend-only configuration.
so, we added to main backend file -> both origins(local:3000 and prod:vercel.com..)

error caught: mistakenly  destructuring req.body as an array using [] but req.body is a JSON object, (so values becomes undefined)😬
&& also another mistake, 1 more cors config below the 0th cors config causing backend crash(i.e app.options("*", cors());),
key note: keep only 1 cors in backend for preventing unknown issues...
 ________________________________________________________________________________________

 ________________________________________________________________________________________




